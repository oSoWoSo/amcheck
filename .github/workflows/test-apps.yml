name: "test apps"

on:
  push:
    #branches: main
    paths:
      - 'programs/x86_64/**'
      - .github/workflows/test-apps.yml

  repository_dispatch:
    types: [check]

  workflow_dispatch:
    inputs:
      reset_stats:
        description: "RESET stats"
        required: true
        default: false
        type: boolean
      retest_excluded:
        description: "TEST excluded"
        required: true
        default: false
        type: boolean
      what_test:
        description: "App names: (space between)"
        required: false
        default: ""
        type: string
      how_many:
        description: "Number of apps: (max 256)"
        required: false
        default: ''
        type: integer

  schedule:
    #- cron: '*/30 6-8 * * *'
    - cron: '*/30 * * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  actions: write
  contents: write

env:
  REPO: ${{ github.repository_owner }}/AM
  BRANCH: main
  TOTEST: 5 # 250 # testing

jobs:
  Inputs:
    runs-on: ubuntu-latest
    steps:
      - uses: m-s-abeer/update-gha-summary-with-workflow-inputs@v1
  triggered:
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: "Remotely triggered"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}

      - name: "Show payload"
        run: echo ${{ github.event.client_payload.sha }} >> $GITHUB_STEP_SUMMARY

  show-stats:
    name: "stats 📝"
    runs-on: ubuntu-22.04
    outputs:
      all: ${{ steps.count.outputs.all }}
      tested: ${{ steps.stats.outputs.tested }}
      excluded: ${{ steps.stats.outputs.excluded }}
    steps:
      - name: "Checkout AM"
        if: github.event.inputs.reset_stats != 'true'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}

      - name: "Count programs 📊"
        if: github.event.inputs.reset_stats != 'true'
        id: count
        run: |
          sort programs/x86_64-apps | grep -v "\"kdegames\"\|\"kdeutils\"\|\"node\"\|\"platform-tools\"\| ffwa-" | awk '{print $2}' > appslist
          x64Count=$(wc -l < appslist)
          echo "all=$x64Count" >> $GITHUB_OUTPUT

      - name: "Upload appslist"
        if: github.event.inputs.reset_stats != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: appslist
          path: appslist
          if-no-files-found: error
          retention-days: 1
          compression-level: 0

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Reset stats"
        if: github.event.inputs.reset_stats == 'true'
        run: |
          echo "### stats RESET" >> $GITHUB_STEP_SUMMARY
          rm -rf results
          git config --global user.name "${{ github.repository_owner }}"
          git config --global user.email "noreply@github.com"
          git rm -r results
          git commit -m "reset stats"
          git push --force
          git clean -f

      - name: "Count stats 📊"
        if: github.event.inputs.reset_stats != 'true'
        id: stats
        run: |
          if [ -f results/tested ]; then
            tested=$(wc -l < results/tested)
          else
            tested='0'
          fi
          if [ -f results/excluded ]; then
            excluded=$(wc -l < results/excluded)
          else
            excluded='0'
          fi
          echo "tested=$tested" >> $GITHUB_OUTPUT
          echo "excluded=$excluded" >> $GITHUB_OUTPUT

      - name: "Show stats 📊"
        if: github.event.inputs.reset_stats != 'true'
        run: |
          echo "### 🎬 apps: ${{ steps.count.outputs.all }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.stats.outputs.tested }}" != '0' ]]; then
            echo "🔨 tests:" >> $GITHUB_STEP_SUMMARY
            echo " 🏁 ${{ steps.stats.outputs.tested }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ steps.stats.outputs.excluded }}" != '0' ]]; then
            echo " ❌ ${{ steps.stats.outputs.excluded }} (excluded)" >> $GITHUB_STEP_SUMMARY
          fi

  generate-matrix:
    name: "matrix 🌀"
    if: github.event.inputs.reset_stats != 'true'
    needs: show-stats
    runs-on: ubuntu-22.04
    outputs:
      skip: ${{ steps.set-matrix.outputs.skip }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Download appslist"
        uses: actions/download-artifact@v4
        with:
          name: appslist

      - name: "Generate Matrix 🏆"
        id: set-matrix
        if: github.event.inputs.retest_excluded != 'true'
        run: |
          if [[ -f results/tested ]]; then
            echo "tested exist"
            if diff -q appslist results/tested; then
              echo "Everything checked"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "Getting temp list"
              comm -23 appslist results/tested > totest_tmp.list
            fi
          else
            echo "First run!"
            cp appslist totest_tmp.list
          fi
          if [[ -f results/excluded ]]; then
            echo "Excluded exists"
            comm -23 totest_tmp.list results/excluded > totest.list
            if [ ! -s totest.list ]; then
              echo "List is empty"
              echo " 🏁 Nothing to test 🏁" >> $GITHUB_STEP_SUMMARY
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            echo "Creating new list"
            mv totest_tmp.list totest.list
          fi
          if [ ! -z "${{ github.event.inputs.what_test }}" ]; then
            echo "Testing only: ${{ github.event.inputs.what_test }}"
            FILES="${{ github.event.inputs.what_test }}"
          elif [ "${{ github.event.inputs.retest_excluded }}" == 'true' ]; then
            echo "Testing excluded"
            if [ -f result-var/excluded ]; then
              if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
                echo "Used workflow dispatch"
                how_many="${{ github.event.inputs.how_many }}"
                if [ -z "$how_many" ]; then
                  echo "Don't have numbers"
                  how_many="${{ env.TOTEST }}"
                fi
              else
                echo "Shedule or push?"
                echo "how_many=${{ env.TOTEST }}"
                how_many=${{ env.TOTEST }}
                if [ -z "$how_many" ]; then
                  echo "Still don't exist"
                  how_many="$TOTEST"
                fi
              fi
              cat result-var/excluded > totest.list
            else
              echo "Nothing excluded!"
              echo "Nothing excluded!" >> $GITHUB_STEP_SUMMARY
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "Used workflow dispatch"
              how_many="${{ github.event.inputs.how_many }}"
              if [ -z "$how_many" ]; then
                echo "Don't have numbers"
                how_many="${{ env.TOTEST }}"
              fi
            else
              echo "Shedule or push?"
              echo "how_many=${{ env.TOTEST }}"
              how_many=${{ env.TOTEST }}
              if [ -z "$how_many" ]; then
                echo "Still don't exist"
                how_many="$TOTEST"
              fi
            fi
            FILES=$(head -n "$how_many" totest.list || cat totest.list)
          fi
          echo '-------------------------------------------------------------'
          echo 'Testing files:'
          echo '-------------------------------------------------------------'
          echo "${FILES}"
          echo '-------------------------------------------------------------'
          MATRIX="{\"include\": ["
          for file in $FILES; do
            MATRIX+="{\"file\": \"$file\"},"
          done
          MATRIX="${MATRIX%,}]}"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  run-actions:
    name: "🔨"
    needs: generate-matrix
    runs-on: ubuntu-22.04
    if: ${{ needs.generate-matrix.outputs.skip != 'true' }}
    strategy:
      fail-fast: false
      max-parallel: 23
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    env:
      TIMEOUT: 10
    steps:
      - name: "Checkout AM"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}

        # Added ripgrep for bat
      - name: "Cache dependencies"
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: wget curl torsocks zsync ripgrep
          version: 1.0

      - name: "Install AM 🎁"
        run: |
          sudo systemctl enable tor.service || systemctl enable tor.service
          sudo systemctl start tor.service || systemctl start tor.service
          chmod +x ./INSTALL
          sudo ./INSTALL 2> /dev/null || ./INSTALL

      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          path: results

      - name: "git config"
        run: |
          git config --global user.name "${{ github.repository_owner }}"
          git config --global user.email "noreply@github.com"

      - name: "Create directory"
        working-directory: programs/x86_64
        run: |
          echo "Creating results directory"
          mkdir -p results

      - name: "APP ${{ matrix.file }} 🚧"
        working-directory: programs/x86_64
        run: echo "APP=\"${{ matrix.file }}\"" | tee -a results/out-"${{ matrix.file }}"

      - name: "Is ${{ matrix.file }} AppImage? 🚧"
        id: is-appimage
        working-directory: programs/x86_64
        run: |
          if grep -qe "appimage-extract\|mage\$\|tmp/\*mage" "${{ matrix.file }}" 1>/dev/null; then
            echo "APPIMAGE='yes'" | tee -a results/out-"${{ matrix.file }}"
          else
            #echo "EXIT_CODE=99" >> $GITHUB_ENV
            echo "APPIMAGE='no'" >> results/out-"${{ matrix.file }}"
          fi

      - name: "Is ${{ matrix.file }} on GitHub? 🚧"
        id: on-github
        working-directory: programs/x86_64
        run: |
          if grep -q "api.github.com" "${{ matrix.file }}" 2>/dev/null; then
            echo "GITHUB='yes'" | tee -a results/out-"${{ matrix.file }}"
          else
            echo "GITHUB='no'" >> results/out-"${{ matrix.file }}"
          fi

      - name: "SITE ${{ matrix.file }} 🚧"
        working-directory: programs/x86_64
        run: |
          if grep -q "^SITE=" "${{ matrix.file }}" 2>/dev/null; then
            SITE=$(eval echo "$(grep -i '^SITE=' "${{ matrix.file }}" | head -1 | sed 's/SITE=//g')")
            echo "SITE=\"$SITE\"" | tee -a results/out-"${{ matrix.file }}"
          fi

      - name: "test ${{ matrix.file }} 🚧"
        id: test
        working-directory: programs/x86_64
        run: |
          set -uo pipefail
          mkdir -p results
          EXIT_CODE='0'
          TEST='0'

          # Define the content of the script || Alow testing non existent (for workflow tests)
          script_content=$(cat ${{ matrix.file }}) || echo "Testing non exist file! (for workflow test only)"
          # Define the pure name of the app
          pure_arg=$(echo "${{ matrix.file }}" | sed 's/\-appimage$//g' | sed 's:.*/::')

          # Allow installing applications even if the command already exists
          sed -i '/command -v "$pure_arg"/d; /command already exists/d' /opt/am/modules/install.am

          # Special patches
          if [[ "$pure_arg" =~ (node|npm) ]]; then
            sed -i 's/_check_if_script_installs_a_metapackage || return 1//g' /opt/am/modules/install.am
          fi

          # Install the application

          if [[ "$pure_arg" =~ (kvrt|suyu|vikunja) ]]; then
            echo "This application cannot be installed in github actions" | tee -a results/log-"${{ matrix.file }}"
            echo "This application is excluded. Cannot be installed in github actions" >> $GITHUB_STEP_SUMMARY
            echo "${{ matrix.file }}" >> results/ok-${{ matrix.file }}
          else
          
            if [[ "$pure_arg" =~ (gimp|libreoffice|mpv|wine) ]]; then

              echo 1 | timeout "$TIMEOUT"m am -i "${{ matrix.file }}" --debug 2>&1 | tee "results/log-${{ matrix.file }}"

            elif [[ "$pure_arg" =~ (bat-extras) ]]; then

              echo y | timeout "$TIMEOUT"m am -i bat --debug 2>/dev/null | tee /dev/null
              echo y | timeout "$TIMEOUT"m am -i "${{ matrix.file }}" --debug 2>&1 | tee "results/log-${{ matrix.file }}"

            else

              echo y | timeout "$TIMEOUT"m am -i "${{ matrix.file }}" --debug 2>&1 | tee "results/log-${{ matrix.file }}"

            fi

            LASTDIR=$(ls -td /opt/* | head -1 | sed 's:.*/::')

            # If an application is blacklisted, ignore it
            if [ "$LASTDIR" = am ]; then

              if [ "$TEST" == 0 ]; then

                echo "### 💀 ${{ matrix.file }}" >> $GITHUB_STEP_SUMMARY
                echo "${{ matrix.file }}" >> results/ko-${{ matrix.file }}
                exit 0

              elif  [ "$TEST" == 1 ]; then

                echo "Testing non exist file! (for test 2nd test)"
                echo "${{ matrix.file }}" >> results/ko-${{ matrix.file }}
                exit 0

              fi

            # If the last modified directory contains a file named "remove", check the installed files
            elif test -f /opt/"$LASTDIR"/remove; then

              printf "\n-------------------------------------------------------------\n\n"

              # Check structure of directories in /opt
              echo " Structure of the directory in /opt"
              echo ""
              ls /opt/"$LASTDIR" | tee -a results/log-"${{ matrix.file }}"

              printf "\n-------------------------------------------------------------\n\n"

              # Check the command in /usr/local/bin
              echo " Command in \$PATH"
              echo ""
              command -v "$pure_arg" | tee -a results/log-"${{ matrix.file }}" || command -v "$LASTDIR" | tee -a results/log-"${{ matrix.file }}" || ls /usr/local/bin | tee -a results/log-"${{ matrix.file }}"

              printf "\n-------------------------------------------------------------\n\n"

              # Check launchers in /usr/local/share/applications
              echo " Launchers in /usr/local/share/applications" | tee -a results/log-"${{ matrix.file }}"
              echo ""

              if test -f /usr/local/share/applications/*AM.desktop 2>/dev/null; then

                 ls /usr/local/share/applications | grep "AM.desktop$" | tee -a results/log-"${{ matrix.file }}"

              elif echo "$script_content" | grep -q -- '^./"$APP" --appimage-extract.*./"$APP".desktop$'; then

                 ls /usr/local/share/applications | grep "AM.desktop$" | tee -a results/log-"${{ matrix.file }}"

              else

                 echo "No .desktop file available" | tee -a results/log-"${{ matrix.file }}"

              fi

              printf "\n-------------------------------------------------------------\n\n"

                #size=$(cat "results/log-${{ matrix.file }}" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2)
                #Preversion=$(cat "results/log-${{ matrix.file }}" | tee /dev/null | grep '◆' | tail -1 | head -1)
                #echo "pre version is $Preversion"
                #version=$(echo "$Preversion" | awk '{print $3}')
                #echo "version is $version"

              if [[ "$pure_arg" =~ (gimp|libreoffice|mpv|wine) ]]; then
         
                size=$(cat "results/log-${{ matrix.file }}" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2 | tail -1)
                Preversion=$(cat "results/log-${{ matrix.file }}" | tee /dev/null | grep '◆' | tail -2 | head -1)
                echo "pre version is $Preversion"
                version=$(echo "$Preversion" | awk '{print $3}' | cut -d'.' -f1-3)
                echo "version is $version"

              else

                size=$(cat "results/log-${{ matrix.file }}" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2)
                Preversion=$(cat "results/log-${{ matrix.file }}" | tee /dev/null | grep '◆' | tail -1)
                echo "pre version is $Preversion"
                version=$(cat "results/log-${{ matrix.file }}" | tee /dev/null | grep '◆' | tail -1 | awk '{print $3}')
                echo "version is $version"

              fi

              rawlink=$(grep 'https://' < "results/log-${{ matrix.file }}" | head -1 | cut -d' ' -f4)
              echo "link=${rawlink}" | tee -a results/out-"${{ matrix.file }}"

              echo "size=${size}" | tee -a results/out-"${{ matrix.file }}"
              echo "version=${version}" | tee -a results/out-"${{ matrix.file }}"

              echo "Injecting info into programs/x86_64/${{ matrix.file }}"
              if [ -n "$size" ]; then
                echo "--- LATEST INFO ---" | tee -a programs/x86_64/"${{ matrix.file }}"
                echo "size=${size}" | tee -a results/out-"${{ matrix.file }}" | tee -a programs/x86_64/"${{ matrix.file }}"
                echo "--- last check: $(date -u) ---" | tee -a programs/x86_64/"${{ matrix.file }}"
              else
                echo "No size!"
                #exit 1
              fi

              if [ -n "$version" ]; then
                echo "--- LATEST INFO ---" | tee -a programs/x86_64/"${{ matrix.file }}"
                echo "version=${version}" | tee -a programs/x86_64/"${{ matrix.file }}"
                echo "--- last check: $(date -u) ---" | tee -a programs/x86_64/"${{ matrix.file }}"
              else
                echo "No version!"
                #exit 1
              fi

              git add "programs/x86_64/${{ matrix.file }}"
              git commit -m "injected latest info into ${{ matrix.file }}"
              # Remove the application
              am -R "$LASTDIR"
              echo "${{ matrix.file }}" >> results/tested

            # Any other result is a failure
            else
              echo "${{ matrix.file }}" >> results/ko-"${{ matrix.file }}"
              echo "::error title=⛔ error 9:: I will try again"
              #echo "${{ matrix.file }} failed" >> $GITHUB_STEP_SUMMARY
              exit 0 # Don't fail now, we will try again
            fi
          fi

      - name: "Upload out ⬆️"
        uses: actions/upload-artifact@v4
        with:
          name: out-${{ matrix.file }}
          path: programs/x86_64/results/out-${{ matrix.file }}
          if-no-files-found: error
          retention-days: 1
          compression-level: 0

      - name: "Upload KO Results ☝️"
        # if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ko-${{ matrix.file }}
          path: programs/x86_64/results/ko-${{ matrix.file }}
          if-no-files-found: ignore
          retention-days: 1

      - name: "Upload OK Results ⬆️"
        # if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ok-${{ matrix.file }}
          path: programs/x86_64/results/ok-${{ matrix.file }}
          if-no-files-found: ignore
          retention-days: 1

  check-failed:
    name: "trigger retest if needed"
    needs: run-actions
    runs-on: ubuntu-22.04
    if: (always() && github.event.inputs.reset_stats != 'true' && needs.generate-matrix.outputs.skip != 'true')
    outputs:
      failed: ${{ steps.proces.outputs.failed }}
    steps:
      - name: "Git Config"
        run: |
          git config --global user.name "${{ github.repository_owner }}"
          git config --global user.email "noreply@github.com"

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Download ko results"
        uses: actions/download-artifact@v4
        with:
          path: results
          pattern: ko-*

      - name: "Process failed results"
        id: proces
        run: |
          find -name 'ko-*'
          for KoFile in results/ko-*; do
            [ -f "$KoFile" ] || continue
            appname=$(basename "$KoFile" | cut -d'-' -f2-)
            if [[ -f "$KoFile" ]]; then
              echo "$appname" | tee -a failing
              rm -f "$KoFile"
            fi
          done
          if [ -f failing ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          fi

      - name: "Upload failing"
        uses: actions/upload-artifact@v4
        with:
          name: failing
          path: failing
          if-no-files-found: ignore
          retention-days: 1

  test-failed:
    name: "test failed"
    needs: check-failed
    runs-on: ubuntu-22.04
    if: needs.check-failed.outputs.failed == 'true'
    steps:
      - name: "Checkout AM"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}

      - name: "Download failing"
        uses: actions/download-artifact@v4
        with:
          name: failing
          path: failing

        # Added ripgrep for bat
      - name: "Cache dependencies"
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: wget curl torsocks zsync ripgrep
          version: 1.0

      - name: "Install AM 🎁"
        run: |
          sudo systemctl enable tor.service || systemctl enable tor.service
          sudo systemctl start tor.service || systemctl start tor.service
          chmod +x ./INSTALL
          sudo ./INSTALL 2> /dev/null || ./INSTALL

      - name: "Retest"
        id: retest
        run: |
          mkdir -p results
          if [[ -f failing ]]; then
            echo "failing exist"
            for fail in $(cat failing); do
              echo "$fail"
              cd programs/x86_64
              echo "APP=\"$fail\"" | tee -a results/out-"$fail"
              if grep -qe "appimage-extract\|mage\$\|tmp/\*mage" "$fail" 1>/dev/null; then
                echo "APPIMAGE='yes'" | tee -a results/out-"$fail"
              else
                #echo "EXIT_CODE=99" >> $GITHUB_ENV
                echo "APPIMAGE='no'" >> results/out-"$fail"
                touch results/out-"$fail"
              fi
              if grep -q "api.github.com" "$fail" 2>/dev/null; then
                echo "GITHUB='yes'" | tee -a results/out-"$fail"
              else
                #echo "EXIT_CODE=9" >> $GITHUB_ENV
                echo "GITHUB='no'" >> results/out-"$fail"
                touch results/out-"$fail"
              fi
              if grep -q "^SITE=" "$fail" 2>/dev/null; then
                SITE=$(eval echo "$(grep -i '^SITE=' "$fail" | head -1 | sed 's/SITE=//g')")
                echo "SITE=\"$SITE\"" | tee -a results/out-"$fail"
              fi
              if grep -q "^version=" "$fail" 2>/dev/null; then
                link=$(eval echo "$(grep -i '^version=' "$fail" | head -1 | sed 's/version=//g')")
                if [ -z "$link" ]; then
                  sed -i 's/curl -Ls/torsocks curl -Ls/g' "$fail"
                  link=$(eval echo "$(grep -i '^version=' "$fail" | head -1 | sed 's/version=//g')")
                  if [ -z "$version" ]; then
                    sudo systemctl restart tor.service || systemctl restart tor.service
                    wait
                    link=$(eval echo "$(grep -i '^version=' "$fail" | head -1 | sed 's/version=//g')")
                  fi
                fi
                [ -n "$link" ] && echo "link=\"$link\"" | tee -a results/out-"$fail"
              fi
              echo '-----------------------------------------------------------------' | tee -a results/out-"$fail"
              if [[ "$fail" =~ (gimp|libreoffice|mpv|wine) ]]; then
                if command -v echo 1 | am -i "$fail" --debug 2>&1 | tee "results/log-$fail"; then
                  size=$(cat "results/log-$fail" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2)
                  Preversion=$(cat "results/log-$fail" | tee /dev/null | grep '◆' | tail -1 | head -1)
                  echo "pre version is $Preversion"
                  version=$(echo "$Preversion" | awk '{print $3}')
                  echo "version=$version" | tee -a "results/out-$fail"
                else
                  echo "$fail" | tee -a results/excluded failed
                fi
              elif [[ "$fail" =~ (bat-extras) ]]; then
                if command -v echo y | am -i bat "$fail" --debug 2>&1 | tee "results/log-$fail"; then
                  size=$(cat "results/log-$fail" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2 | tail -1)
                  Preversion=$(cat "results/log-$fail" | tee /dev/null | grep '◆' | tail -2 | head -1)
                  echo "pre version is $Preversion"
                  version=$(echo "$Preversion" | awk '{print $3}' | cut -d'.' -f1-3)
                  echo "version=$version" | tee -a "results/out-$fail"
                else
                  echo "$fail" | tee -a results/excluded failed
                fi
              else
                if command -v echo y | am -i "$fail" --debug 2>&1 | tee "results/log-$fail"; then
                  size=$(cat "results/log-$fail" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2)
                  Preversion=$(cat "results/log-$fail" | tee /dev/null | grep '◆' | tail -1)
                  echo "pre version is $Preversion"
                  version=$(cat "results/log-$fail" | tee /dev/null | grep '◆' | tail -1 | awk '{print $3}')
                  echo "version=$version" | tee -a "results/out-$fail"
                else
                  echo "$fail" | tee -a results/excluded failed
                fi
              fi
              rm -f "$KoFile"

            done

            rm -f failing
            if [ -f results/excluded ]; then
              sort -u results/excluded -o results/excluded
              git add results/excluded
            fi
            git add results
            git commit -m "retest"
            git push
          else
            echo "Nothing failed"
          fi

      - name: "Upload out ⬆️"
        uses: actions/upload-artifact@v4
        with:
          path: programs/x86_64/results/out-*
          if-no-files-found: warn
          retention-days: 1
          compression-level: 0

      - name: "Upload KO Results ☝️"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: programs/x86_64/results/ko-*
          if-no-files-found: warn
          retention-days: 1

      - name: "Upload OK Results ⬆️"
        # if: success()
        uses: actions/upload-artifact@v4
        with:
          path: programs/x86_64/results/ok-*
          if-no-files-found: ignore
          retention-days: 1

  update-results:
    name: "results 📰"
    needs: test-failed
    runs-on: ubuntu-22.04
    if: (always() && github.event.inputs.reset_stats != 'true' && needs.generate-matrix.outputs.skip != 'true')
    outputs:
      failed: ${{ steps.proces.outputs.failed }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Git Config"
        run: |
          git config --global user.name "${{ github.repository_owner }}"
          git config --global user.email "noreply@github.com"

      - name: "Download results ⬇️"
        uses: actions/download-artifact@v4
        with:
          path: results
          merge-multiple: true

      - name: "Download appslist"
        uses: actions/download-artifact@v4
        with:
          name: appslist

      - name: "Process log results 2"
        id: proces2
        if: (always() && needs.generate-matrix.outputs.skip != 'true' && github.event.inputs.reset_stats != 'true')
        run: |
          mkdir -p results

          for LogFile in results/out-*; do

            appname=$(basename "$LogFile" | cut -d'-' -f2-)
            echo '_________________________________________________________________'
            echo "$appname"
            echo '-----------------------------------------------------------------'
            cat "$LogFile"
            echo '-----------------------------------------------------------------'

            if [ -z "$size" ]; then

              size=$(cat "$LogFile" | grep 'size' | cut -d'=' -f2)
              echo "size is $size"

            fi

            if [ -z "$version" ]; then

              version=$(cat "$LogFile" | grep 'version' | cut -d'=' -f2)
              echo "version is $version"

            fi

            cat "$LogFile" | grep -E '(^.*=.*$|^.*----.*$)' >> results/log
            echo "$appname" >> results/tested
            echo '-----------------------------------------------------------------' >> results/log
            rm -f "$LogFile"

          done

          if [ -f failed ]; then

            for fail in failed; do

              echo ":x: $fail excluded now" >> $GITHUB_STEP_SUMMARY

            done

          fi

          if [ -f results/tested ]; then

            sort -u results/tested -o results/tested
            git add results/tested
            git add results/log

          fi

          if [ -f results/excluded ]; then

              sort -u results/excluded -o results/excluded
              git add results/excluded

          fi

          git add results

      - name: "Show results"
        if: (always() && needs.generate-matrix.outputs.skip != 'true' && github.event.inputs.reset_stats != 'true')
        run: |
          if [[ -f results/tested ]]; then
            tested=$(wc -l < results/tested 2>/dev/null || echo 0)
          else
            tested='0'
          fi
          if [[ -f results/excluded ]]; then
            excluded=$(wc -l < results/excluded 2>/dev/null || echo 0)
          else
            excluded='0'
          fi
          if [[ -f failed ]]; then
            fail=$(wc -l < failed 2>/dev/null || echo 0)
          else
            fail='0'
          fi
          count=$(wc -l < appslist)
          remaining=$((count - tested - excluded))
          (( remaining < 0 )) && remaining=0
          echo "🏁 $tested tested" >> $GITHUB_STEP_SUMMARY
          if [[ "$fail" != '0' ]]; then
            echo ":x: $fail excluded now" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "$excluded" != '0' ]]; then
            echo "😱 $excluded excluded" >> $GITHUB_STEP_SUMMARY
          fi
          echo "### 🛅 $remaining to test" >> $GITHUB_STEP_SUMMARY
          rm -f appslist
          rm -f results/appslist
          #rm -f results/ok-*
          echo '-----------------------------------------------------------------'
          echo "Missed results:"
          echo '-----------------------------------------------------------------'
          ls -R results/
          for rest in results/*; do
            cat "$rest"
          done
          echo '-----------------------------------------------------------------'

      - name: "Push"
        if: ${{ needs.generate-matrix.outputs.skip != 'true' }}
        run: |
          if [[ "$GITHUB_REF" == 'refs/pull/*' ]]; then
            echo "This is a Pull Request. Not saving results."
            exit 0
          elif git diff-index --quiet HEAD; then
            echo "No changes to commit." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            #git status
            #git log --oneline -5
            #git diff
            git add results
            git commit -m "check"
            git push --force-with-lease && echo "sync successfull" >> $GITHUB_STEP_SUMMARY || (git diff && git status)
          fi

  # delete-all-artifacts:
  #   name: "cleanup 🧹"
  #   runs-on: ubuntu-22.04
  #   needs: update-results
  #   if: always()
  #   steps:
  #     - name: "Check out repository 🏃"
  #       uses: actions/checkout@v4
  #
  #     - name: "Delete Artifacts 🙈"
  #       env:
  #         REPO_NAME: ${{ github.repository }}
  #         RUN_ID: ${{ github.run_id }}
  #         TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         echo "Fetching and deleting all artifacts for run ID: $RUN_ID"
  #         PAGE=1
  #         DELETED=0
  #         while true; do
  #           RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
  #            "https://api.github.com/repos/$REPO_NAME/actions/runs/$RUN_ID/artifacts?per_page=1000&page=$PAGE")
  #           ARTIFACT_IDS=$(echo "$RESPONSE" | jq -r '.artifacts[].id')
  #           if [[ -z "$ARTIFACT_IDS" ]]; then
  #             echo "No more artifacts to delete. Total deleted: $DELETED"
  #             break
  #           fi
  #           for ARTIFACT_ID in $ARTIFACT_IDS; do
  #             echo "Deleting artifact with ID: $ARTIFACT_ID"
  #             curl -X DELETE -s -H "Authorization: token $TOKEN" \
  #              "https://api.github.com/repos/$REPO_NAME/actions/artifacts/$ARTIFACT_ID"
  #             ((DELETED+=1))
  #           done
  #           ((PAGE+=1))
  #         done
  #         echo "Successfully deleted $DELETED artifacts."
  #         echo "Git clean"
  #         git clean -f

  already-tested:
    name: "all 🏁"
    runs-on: ubuntu-22.04
    needs: generate-matrix
    if: ${{ needs.generate-matrix.outputs.skip == 'true' }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Git Config"
        run: |
           git config --global user.name "${{ github.repository_owner }}"
           git config --global user.email "noreply@github.com"

      - name: "Reset all tested"
        run: |
          echo "All apps already tested..." >> $GITHUB_STEP_SUMMARY
          echo "### stats RESET" >> $GITHUB_STEP_SUMMARY
          cp results/log log.old 2>/dev/null && git add log.old || echo "Log deleted without backup"
          cp results/excluded excluded.old 2>/dev/null && git add excluded.old || echo "Excluded deleted without backup"
          #rm -rf results
          git rm -r results
          git commit -m "reset stats"
          git push --force
          git clean -f
